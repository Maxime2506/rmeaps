// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// chances_absorption
NumericMatrix chances_absorption(const IntegerMatrix rkdist, const NumericVector emplois, const NumericMatrix modds, const NumericVector f);
RcppExport SEXP _rmeaps_chances_absorption(SEXP rkdistSEXP, SEXP emploisSEXP, SEXP moddsSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix >::type rkdist(rkdistSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type emplois(emploisSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type modds(moddsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(chances_absorption(rkdist, emplois, modds, f));
    return rcpp_result_gen;
END_RCPP
}
// communaliser
NumericMatrix communaliser(NumericMatrix flux, IntegerVector group_orig, IntegerVector group_dest);
RcppExport SEXP _rmeaps_communaliser(SEXP fluxSEXP, SEXP group_origSEXP, SEXP group_destSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type flux(fluxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group_orig(group_origSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group_dest(group_destSEXP);
    rcpp_result_gen = Rcpp::wrap(communaliser(flux, group_orig, group_dest));
    return rcpp_result_gen;
END_RCPP
}
// meaps_oneshuf
NumericMatrix meaps_oneshuf(IntegerMatrix rkdist, NumericVector emplois, NumericVector actifs, NumericMatrix modds, NumericVector f, IntegerVector shuf, std::string mode, Nullable<NumericVector> oddssubjectifs, bool normalisation, double fuite_min, double seuil_newton);
RcppExport SEXP _rmeaps_meaps_oneshuf(SEXP rkdistSEXP, SEXP emploisSEXP, SEXP actifsSEXP, SEXP moddsSEXP, SEXP fSEXP, SEXP shufSEXP, SEXP modeSEXP, SEXP oddssubjectifsSEXP, SEXP normalisationSEXP, SEXP fuite_minSEXP, SEXP seuil_newtonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type rkdist(rkdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emplois(emploisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type actifs(actifsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type modds(moddsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type shuf(shufSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type oddssubjectifs(oddssubjectifsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalisation(normalisationSEXP);
    Rcpp::traits::input_parameter< double >::type fuite_min(fuite_minSEXP);
    Rcpp::traits::input_parameter< double >::type seuil_newton(seuil_newtonSEXP);
    rcpp_result_gen = Rcpp::wrap(meaps_oneshuf(rkdist, emplois, actifs, modds, f, shuf, mode, oddssubjectifs, normalisation, fuite_min, seuil_newton));
    return rcpp_result_gen;
END_RCPP
}
// meaps_multishuf
NumericMatrix meaps_multishuf(IntegerMatrix rkdist, NumericVector emplois, NumericVector actifs, NumericMatrix modds, NumericVector f, IntegerMatrix shuf, std::string mode, Nullable<NumericVector> oddssubjectifs, int nthreads, bool progress, bool normalisation, double fuite_min, double seuil_newton);
RcppExport SEXP _rmeaps_meaps_multishuf(SEXP rkdistSEXP, SEXP emploisSEXP, SEXP actifsSEXP, SEXP moddsSEXP, SEXP fSEXP, SEXP shufSEXP, SEXP modeSEXP, SEXP oddssubjectifsSEXP, SEXP nthreadsSEXP, SEXP progressSEXP, SEXP normalisationSEXP, SEXP fuite_minSEXP, SEXP seuil_newtonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type rkdist(rkdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emplois(emploisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type actifs(actifsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type modds(moddsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type shuf(shufSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type oddssubjectifs(oddssubjectifsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< bool >::type normalisation(normalisationSEXP);
    Rcpp::traits::input_parameter< double >::type fuite_min(fuite_minSEXP);
    Rcpp::traits::input_parameter< double >::type seuil_newton(seuil_newtonSEXP);
    rcpp_result_gen = Rcpp::wrap(meaps_multishuf(rkdist, emplois, actifs, modds, f, shuf, mode, oddssubjectifs, nthreads, progress, normalisation, fuite_min, seuil_newton));
    return rcpp_result_gen;
END_RCPP
}
// meaps_tension
List meaps_tension(IntegerMatrix rkdist, NumericVector emplois, NumericVector actifs, NumericMatrix modds, NumericVector f, IntegerMatrix shuf, std::string mode, Nullable<NumericVector> oddssubjectifs, int nthreads, bool progress, bool normalisation, double fuite_min, double seuil_newton, double seuil_dispo);
RcppExport SEXP _rmeaps_meaps_tension(SEXP rkdistSEXP, SEXP emploisSEXP, SEXP actifsSEXP, SEXP moddsSEXP, SEXP fSEXP, SEXP shufSEXP, SEXP modeSEXP, SEXP oddssubjectifsSEXP, SEXP nthreadsSEXP, SEXP progressSEXP, SEXP normalisationSEXP, SEXP fuite_minSEXP, SEXP seuil_newtonSEXP, SEXP seuil_dispoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type rkdist(rkdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emplois(emploisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type actifs(actifsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type modds(moddsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type shuf(shufSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type oddssubjectifs(oddssubjectifsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< bool >::type normalisation(normalisationSEXP);
    Rcpp::traits::input_parameter< double >::type fuite_min(fuite_minSEXP);
    Rcpp::traits::input_parameter< double >::type seuil_newton(seuil_newtonSEXP);
    Rcpp::traits::input_parameter< double >::type seuil_dispo(seuil_dispoSEXP);
    rcpp_result_gen = Rcpp::wrap(meaps_tension(rkdist, emplois, actifs, modds, f, shuf, mode, oddssubjectifs, nthreads, progress, normalisation, fuite_min, seuil_newton, seuil_dispo));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmeaps_chances_absorption", (DL_FUNC) &_rmeaps_chances_absorption, 4},
    {"_rmeaps_communaliser", (DL_FUNC) &_rmeaps_communaliser, 3},
    {"_rmeaps_meaps_oneshuf", (DL_FUNC) &_rmeaps_meaps_oneshuf, 11},
    {"_rmeaps_meaps_multishuf", (DL_FUNC) &_rmeaps_meaps_multishuf, 13},
    {"_rmeaps_meaps_tension", (DL_FUNC) &_rmeaps_meaps_tension, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmeaps(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
